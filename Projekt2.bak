#define C_PATH 5
#define C_META 4
#define C_END 6


/*
1 - czarny
6 - bialy
5- czerwony
4 - zolty
*/

string tablica[100];
int counter = 0;

void turnLeft() {
            bool isOutOfTape = false;
            while(1) {
                int middle_sensor = Sensor(S2);
                if( !isOutOfTape && middle_sensor != C_PATH ) isOutOfTape = true;
                OnRev(OUT_A, 30);
                OnFwd(OUT_C, 30);
                if(middle_sensor == C_PATH && isOutOfTape) {
                    OnFwd(OUT_AC, 0);
                    break;
                }  // end if
            }      // end while
}

void turnRight() {
            bool isOutOfTape = false;
            while(1) {
                int middle_sensor = Sensor(S2);
                if( !isOutOfTape && middle_sensor != C_PATH ) isOutOfTape = true;
                OnFwd(OUT_A, 30);
                OnRev(OUT_C, 30);
                if(middle_sensor == C_PATH && isOutOfTape) {
                    OnFwd(OUT_AC, 0);
                    break;
                }  // end if
            }      // end while
}

void goForward() {
        int left_sensor = Sensor(S1);
        int middle_sensor = Sensor(S2);
        int right_sensor = Sensor(S3);

        if(left_sensor == C_PATH) {
            while(middle_sensor != C_PATH) {
                OnFwd(OUT_A, 10);
                OnFwd(OUT_C, 30);
                middle_sensor = Sensor(S2);
            }
        } else if(right_sensor == C_PATH) {
            while(middle_sensor != C_PATH) {
                OnFwd(OUT_A, 30);
                OnFwd(OUT_C, 10);
                middle_sensor = Sensor(S2);
            }
        } else {
            OnFwd(OUT_C, 30);
            OnFwd(OUT_A, 35);
        }
}

void temp() {
    int a = 0;
    int b = 65;
    for(int i = 0; i < counter; i++) {
        if(tablica[i] != "0" ) {
            if(i == 6) { a = 50; b=b+60; }
            b = b-10;
            TextOut(a,b,tablica[i]);
        }
    }
}

void test() {
int i = 1;
int a = 0;
while(a<500) {
    if(i == counter - 2) i = 1;
        if(tablica[i] != "0" && tablica[i+1] == "0") {
            tablica[i+1] = tablica[i];
            tablica[i] = "0";
        }
        i++;
        a++;
    }
}

void optimize() {
     for(int i = 1; i < counter-1; i++) {
         if(tablica[i] != "0") {
             if(tablica[i] == "zawrot") {
                 if(tablica[i-1] == "lewo" && tablica[i+1] == "prawo") {
                      tablica[i-1] = "0";
                      tablica[i] = "0";
                      tablica[i+1] = "zawrot";
                      i = 1;
                 } else if(tablica[i-1] == "lewo" && tablica[i+1] == "prosto") {
                      tablica[i-1] = "0";
                      tablica[i] = "0";
                      tablica[i+1] = "prawo";
                      i = 1;
                 } else if(tablica[i-1] == "prawo" && tablica[i+1] == "lewo") {
                      tablica[i-1] = "0";
                      tablica[i] = "0";
                      tablica[i+1] = "zawrot";
                      i = 1;
                 } else if(tablica[i-1] == "prosto" && tablica[i+1] == "lewo") {
                      tablica[i-1] = "0";
                      tablica[i] = "0";
                      tablica[i+1] = "prawo";
                      i = 1;
                 }  else if(tablica[i-1] == "prosto" && tablica[i+1] == "prosto") {
                      tablica[i-1] = "0";
                      tablica[i] = "0";
                      tablica[i+1] = "zawrot";
                      i = 1;
                 } else if(tablica[i-1] == "lewo" && tablica[i+1] == "lewo") {
                      tablica[i-1] = "0";
                      tablica[i] = "0";
                      tablica[i+1] = "prosto";
                      i = 1;
                 } //else if(i == counter - 1) break;
             test();
             }
         }
     }
}

task main() {
    int left_sensor = 0;
    int middle_sensor = 0;
    int right_sensor = 0;

    SetSensorColorFull(S1);
    SetSensorColorFull(S2);
    SetSensorColorFull(S3);

    string wybor = "Null";

    while (1) {
        left_sensor = Sensor(S1);
        middle_sensor = Sensor(S2);
        right_sensor = Sensor(S3);

        if(left_sensor == C_META && middle_sensor == C_META && right_sensor == C_META) {
            OnFwd(OUT_AC, 0);
            optimize();
            temp();
            Wait(10000);
            break;
        } else if(middle_sensor == C_PATH && (left_sensor == C_PATH || right_sensor == C_PATH)) {
            OnFwd(OUT_AC, 0);
            Wait(200);
            if(left_sensor == C_PATH) wybor = "lewo";
            else if(right_sensor == C_PATH) wybor = "prawo";
            // do przodu kawalek
            OnFwd(OUT_AC, 30);
            Wait(1000);
            OnFwd(OUT_AC, 0);
        } else if(wybor == "lewo") {
            turnLeft();
            wybor = "Null";
            tablica[counter] = "lewo";
            counter++;
        } else if(wybor == "prawo") {
            left_sensor = Sensor(S1);
            middle_sensor = Sensor(S2);
            right_sensor = Sensor(S3);
            Wait(40);
            if(left_sensor == C_PATH || middle_sensor == C_PATH || right_sensor == C_PATH) {
                goForward();
                tablica[counter] = "prosto";
                counter++;
            } else {
                turnRight();
                tablica[counter] = "prawo";
                counter++;
            }
            wybor = "Null";
        } else if(left_sensor == C_END && middle_sensor == C_END && right_sensor == C_END) {
            OnFwd(OUT_AC, 30);
            Wait(100);
            turnLeft();
            tablica[counter] = "zawrot";
            counter++;
        } else {
            goForward();
            //if(tablica[counter-1] != "prosto") {
            //    tablica[counter] = "prosto";
            //    counter++;
            //}
        }
    }
}
